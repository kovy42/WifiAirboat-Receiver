
WifiReceiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  00000bca  00000c5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a2  008000aa  008000aa  00000ca8  2**0
                  ALLOC
  3 .stab         0000216c  00000000  00000000  00000ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000007da  00000000  00000000  00002e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000035ee  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002f0  00000000  00000000  0000361d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000024a1  00000000  00000000  0000390d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000a48  00000000  00000000  00005dae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dff  00000000  00000000  000067f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000884  00000000  00000000  000075f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000009ff  00000000  00000000  00007e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001ebf  00000000  00000000  0000887b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000290  00000000  00000000  0000a73a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__vector_13>
  38:	0c 94 2c 01 	jmp	0x258	; 0x258 <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3a       	cpi	r26, 0xAA	; 170
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	aa ea       	ldi	r26, 0xAA	; 170
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 34       	cpi	r26, 0x4C	; 76
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 87 03 	call	0x70e	; 0x70e <main>
  8a:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <adc_init>:
  92:	d0 98       	cbi	0x1a, 0	; 26
  94:	d1 98       	cbi	0x1a, 1	; 26
  96:	3f 98       	cbi	0x07, 7	; 7
  98:	3e 9a       	sbi	0x07, 6	; 7
  9a:	3d 9a       	sbi	0x07, 5	; 7
  9c:	32 9a       	sbi	0x06, 2	; 6
  9e:	31 9a       	sbi	0x06, 1	; 6
  a0:	30 98       	cbi	0x06, 0	; 6
  a2:	37 9a       	sbi	0x06, 7	; 6
  a4:	08 95       	ret

000000a6 <adc_read>:
  a6:	97 b1       	in	r25, 0x07	; 7
  a8:	8f 71       	andi	r24, 0x1F	; 31
  aa:	90 7e       	andi	r25, 0xE0	; 224
  ac:	98 2b       	or	r25, r24
  ae:	97 b9       	out	0x07, r25	; 7
  b0:	36 9a       	sbi	0x06, 6	; 6
  b2:	36 99       	sbic	0x06, 6	; 6
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <adc_read+0xc>
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	08 95       	ret

000000ba <servo_init>:
  ba:	8d 9a       	sbi	0x11, 5	; 17
  bc:	8f b5       	in	r24, 0x2f	; 47
  be:	80 68       	ori	r24, 0x80	; 128
  c0:	8f bd       	out	0x2f, r24	; 47
  c2:	8f b5       	in	r24, 0x2f	; 47
  c4:	80 62       	ori	r24, 0x20	; 32
  c6:	8f bd       	out	0x2f, r24	; 47
  c8:	8f b5       	in	r24, 0x2f	; 47
  ca:	8f 7e       	andi	r24, 0xEF	; 239
  cc:	8f bd       	out	0x2f, r24	; 47
  ce:	8f b5       	in	r24, 0x2f	; 47
  d0:	8f 7b       	andi	r24, 0xBF	; 191
  d2:	8f bd       	out	0x2f, r24	; 47
  d4:	8f b5       	in	r24, 0x2f	; 47
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	8f bd       	out	0x2f, r24	; 47
  da:	8e b5       	in	r24, 0x2e	; 46
  dc:	80 61       	ori	r24, 0x10	; 16
  de:	8e bd       	out	0x2e, r24	; 46
  e0:	8e b5       	in	r24, 0x2e	; 46
  e2:	88 60       	ori	r24, 0x08	; 8
  e4:	8e bd       	out	0x2e, r24	; 46
  e6:	86 b5       	in	r24, 0x26	; 38
  e8:	97 b5       	in	r25, 0x27	; 39
  ea:	80 e2       	ldi	r24, 0x20	; 32
  ec:	9e e4       	ldi	r25, 0x4E	; 78
  ee:	97 bd       	out	0x27, r25	; 39
  f0:	86 bd       	out	0x26, r24	; 38
  f2:	8c b5       	in	r24, 0x2c	; 44
  f4:	9d b5       	in	r25, 0x2d	; 45
  f6:	1d bc       	out	0x2d, r1	; 45
  f8:	1c bc       	out	0x2c, r1	; 44
  fa:	8e b5       	in	r24, 0x2e	; 46
  fc:	8b 7f       	andi	r24, 0xFB	; 251
  fe:	8e bd       	out	0x2e, r24	; 46
 100:	8e b5       	in	r24, 0x2e	; 46
 102:	82 60       	ori	r24, 0x02	; 2
 104:	8e bd       	out	0x2e, r24	; 46
 106:	8e b5       	in	r24, 0x2e	; 46
 108:	8e 7f       	andi	r24, 0xFE	; 254
 10a:	8e bd       	out	0x2e, r24	; 46
 10c:	08 95       	ret

0000010e <servo_set_a>:
 10e:	68 2f       	mov	r22, r24
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__floatsisf>
 11a:	25 e8       	ldi	r18, 0x85	; 133
 11c:	3b ee       	ldi	r19, 0xEB	; 235
 11e:	41 ee       	ldi	r20, 0xE1	; 225
 120:	50 e4       	ldi	r21, 0x40	; 64
 122:	0e 94 69 05 	call	0xad2	; 0xad2 <__mulsf3>
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	46 e1       	ldi	r20, 0x16	; 22
 12c:	54 e4       	ldi	r21, 0x44	; 68
 12e:	0e 94 de 03 	call	0x7bc	; 0x7bc <__addsf3>
 132:	0e 94 af 04 	call	0x95e	; 0x95e <__fixunssfsi>
 136:	7b bd       	out	0x2b, r23	; 43
 138:	6a bd       	out	0x2a, r22	; 42
 13a:	08 95       	ret

0000013c <pwm_init>:
 13c:	88 23       	and	r24, r24
 13e:	51 f0       	breq	.+20     	; 0x154 <pwm_init+0x18>
 140:	bb 9a       	sbi	0x17, 3	; 23
 142:	83 b7       	in	r24, 0x33	; 51
 144:	80 64       	ori	r24, 0x40	; 64
 146:	83 bf       	out	0x33, r24	; 51
 148:	83 b7       	in	r24, 0x33	; 51
 14a:	88 60       	ori	r24, 0x08	; 8
 14c:	83 bf       	out	0x33, r24	; 51
 14e:	83 b7       	in	r24, 0x33	; 51
 150:	85 60       	ori	r24, 0x05	; 5
 152:	83 bf       	out	0x33, r24	; 51
 154:	66 23       	and	r22, r22
 156:	51 f0       	breq	.+20     	; 0x16c <pwm_init+0x30>
 158:	8f 9a       	sbi	0x11, 7	; 17
 15a:	85 b5       	in	r24, 0x25	; 37
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	85 bd       	out	0x25, r24	; 37
 160:	85 b5       	in	r24, 0x25	; 37
 162:	88 60       	ori	r24, 0x08	; 8
 164:	85 bd       	out	0x25, r24	; 37
 166:	85 b5       	in	r24, 0x25	; 37
 168:	87 60       	ori	r24, 0x07	; 7
 16a:	85 bd       	out	0x25, r24	; 37
 16c:	08 95       	ret

0000016e <pwm_set_a>:
 16e:	81 11       	cpse	r24, r1
 170:	05 c0       	rjmp	.+10     	; 0x17c <pwm_set_a+0xe>
 172:	c3 98       	cbi	0x18, 3	; 24
 174:	83 b7       	in	r24, 0x33	; 51
 176:	8f 7d       	andi	r24, 0xDF	; 223
 178:	83 bf       	out	0x33, r24	; 51
 17a:	08 95       	ret
 17c:	9c b7       	in	r25, 0x3c	; 60
 17e:	8c bf       	out	0x3c, r24	; 60
 180:	83 b7       	in	r24, 0x33	; 51
 182:	80 62       	ori	r24, 0x20	; 32
 184:	83 bf       	out	0x33, r24	; 51
 186:	08 95       	ret

00000188 <pwm_set_b>:
 188:	81 11       	cpse	r24, r1
 18a:	05 c0       	rjmp	.+10     	; 0x196 <pwm_set_b+0xe>
 18c:	97 98       	cbi	0x12, 7	; 18
 18e:	85 b5       	in	r24, 0x25	; 37
 190:	8f 7d       	andi	r24, 0xDF	; 223
 192:	85 bd       	out	0x25, r24	; 37
 194:	08 95       	ret
 196:	93 b5       	in	r25, 0x23	; 35
 198:	83 bd       	out	0x23, r24	; 35
 19a:	85 b5       	in	r24, 0x25	; 37
 19c:	80 62       	ori	r24, 0x20	; 32
 19e:	85 bd       	out	0x25, r24	; 37
 1a0:	08 95       	ret

000001a2 <fifo_init>:
 1a2:	fc 01       	movw	r30, r24
 1a4:	71 83       	std	Z+1, r23	; 0x01
 1a6:	60 83       	st	Z, r22
 1a8:	42 83       	std	Z+2, r20	; 0x02
 1aa:	13 82       	std	Z+3, r1	; 0x03
 1ac:	14 82       	std	Z+4, r1	; 0x04
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	85 83       	std	Z+5, r24	; 0x05
 1b2:	16 82       	std	Z+6, r1	; 0x06
 1b4:	08 95       	ret

000001b6 <fifo_push>:
 1b6:	fc 01       	movw	r30, r24
 1b8:	86 81       	ldd	r24, Z+6	; 0x06
 1ba:	81 11       	cpse	r24, r1
 1bc:	1a c0       	rjmp	.+52     	; 0x1f2 <fifo_push+0x3c>
 1be:	83 81       	ldd	r24, Z+3	; 0x03
 1c0:	a0 81       	ld	r26, Z
 1c2:	b1 81       	ldd	r27, Z+1	; 0x01
 1c4:	a8 0f       	add	r26, r24
 1c6:	b1 1d       	adc	r27, r1
 1c8:	6c 93       	st	X, r22
 1ca:	15 82       	std	Z+5, r1	; 0x05
 1cc:	43 81       	ldd	r20, Z+3	; 0x03
 1ce:	24 2f       	mov	r18, r20
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	28 17       	cp	r18, r24
 1da:	39 07       	cpc	r19, r25
 1dc:	11 f4       	brne	.+4      	; 0x1e2 <fifo_push+0x2c>
 1de:	13 82       	std	Z+3, r1	; 0x03
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <fifo_push+0x30>
 1e2:	4f 5f       	subi	r20, 0xFF	; 255
 1e4:	43 83       	std	Z+3, r20	; 0x03
 1e6:	93 81       	ldd	r25, Z+3	; 0x03
 1e8:	84 81       	ldd	r24, Z+4	; 0x04
 1ea:	98 13       	cpse	r25, r24
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <fifo_push+0x3c>
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	86 83       	std	Z+6, r24	; 0x06
 1f2:	08 95       	ret

000001f4 <fifo_pop>:
 1f4:	fc 01       	movw	r30, r24
 1f6:	85 81       	ldd	r24, Z+5	; 0x05
 1f8:	81 11       	cpse	r24, r1
 1fa:	1b c0       	rjmp	.+54     	; 0x232 <fifo_pop+0x3e>
 1fc:	94 81       	ldd	r25, Z+4	; 0x04
 1fe:	29 2f       	mov	r18, r25
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	a0 81       	ld	r26, Z
 204:	b1 81       	ldd	r27, Z+1	; 0x01
 206:	a2 0f       	add	r26, r18
 208:	b3 1f       	adc	r27, r19
 20a:	8c 91       	ld	r24, X
 20c:	16 82       	std	Z+6, r1	; 0x06
 20e:	42 81       	ldd	r20, Z+2	; 0x02
 210:	50 e0       	ldi	r21, 0x00	; 0
 212:	41 50       	subi	r20, 0x01	; 1
 214:	51 09       	sbc	r21, r1
 216:	24 17       	cp	r18, r20
 218:	35 07       	cpc	r19, r21
 21a:	11 f4       	brne	.+4      	; 0x220 <fifo_pop+0x2c>
 21c:	14 82       	std	Z+4, r1	; 0x04
 21e:	02 c0       	rjmp	.+4      	; 0x224 <fifo_pop+0x30>
 220:	9f 5f       	subi	r25, 0xFF	; 255
 222:	94 83       	std	Z+4, r25	; 0x04
 224:	24 81       	ldd	r18, Z+4	; 0x04
 226:	93 81       	ldd	r25, Z+3	; 0x03
 228:	29 13       	cpse	r18, r25
 22a:	04 c0       	rjmp	.+8      	; 0x234 <fifo_pop+0x40>
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	95 83       	std	Z+5, r25	; 0x05
 230:	08 95       	ret
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	08 95       	ret

00000236 <fifo_clean>:
 236:	fc 01       	movw	r30, r24
 238:	84 81       	ldd	r24, Z+4	; 0x04
 23a:	83 83       	std	Z+3, r24	; 0x03
 23c:	16 82       	std	Z+6, r1	; 0x06
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	85 83       	std	Z+5, r24	; 0x05
 242:	08 95       	ret

00000244 <fifo_is_empty>:
 244:	fc 01       	movw	r30, r24
 246:	85 81       	ldd	r24, Z+5	; 0x05
 248:	08 95       	ret

0000024a <fifo_is_full>:
 24a:	fc 01       	movw	r30, r24
 24c:	86 81       	ldd	r24, Z+6	; 0x06
 24e:	08 95       	ret

00000250 <enable_UDRE_interupt>:
 250:	55 9a       	sbi	0x0a, 5	; 10
 252:	08 95       	ret

00000254 <disable_UDRE_interupt>:
 254:	55 98       	cbi	0x0a, 5	; 10
 256:	08 95       	ret

00000258 <__vector_14>:
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	2f 93       	push	r18
 264:	3f 93       	push	r19
 266:	4f 93       	push	r20
 268:	5f 93       	push	r21
 26a:	6f 93       	push	r22
 26c:	7f 93       	push	r23
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	af 93       	push	r26
 274:	bf 93       	push	r27
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
 27a:	8a e2       	ldi	r24, 0x2A	; 42
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <fifo_pop>
 282:	8c b9       	out	0x0c, r24	; 12
 284:	8a e2       	ldi	r24, 0x2A	; 42
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	0e 94 22 01 	call	0x244	; 0x244 <fifo_is_empty>
 28c:	81 30       	cpi	r24, 0x01	; 1
 28e:	11 f4       	brne	.+4      	; 0x294 <__vector_14+0x3c>
 290:	0e 94 2a 01 	call	0x254	; 0x254 <disable_UDRE_interupt>
 294:	ff 91       	pop	r31
 296:	ef 91       	pop	r30
 298:	bf 91       	pop	r27
 29a:	af 91       	pop	r26
 29c:	9f 91       	pop	r25
 29e:	8f 91       	pop	r24
 2a0:	7f 91       	pop	r23
 2a2:	6f 91       	pop	r22
 2a4:	5f 91       	pop	r21
 2a6:	4f 91       	pop	r20
 2a8:	3f 91       	pop	r19
 2aa:	2f 91       	pop	r18
 2ac:	0f 90       	pop	r0
 2ae:	0f be       	out	0x3f, r0	; 63
 2b0:	0f 90       	pop	r0
 2b2:	1f 90       	pop	r1
 2b4:	18 95       	reti

000002b6 <__vector_13>:
 2b6:	1f 92       	push	r1
 2b8:	0f 92       	push	r0
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	0f 92       	push	r0
 2be:	11 24       	eor	r1, r1
 2c0:	2f 93       	push	r18
 2c2:	3f 93       	push	r19
 2c4:	4f 93       	push	r20
 2c6:	5f 93       	push	r21
 2c8:	6f 93       	push	r22
 2ca:	7f 93       	push	r23
 2cc:	8f 93       	push	r24
 2ce:	9f 93       	push	r25
 2d0:	af 93       	push	r26
 2d2:	bf 93       	push	r27
 2d4:	ef 93       	push	r30
 2d6:	ff 93       	push	r31
 2d8:	6c b1       	in	r22, 0x0c	; 12
 2da:	81 e3       	ldi	r24, 0x31	; 49
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	0e 94 db 00 	call	0x1b6	; 0x1b6 <fifo_push>
 2e2:	ff 91       	pop	r31
 2e4:	ef 91       	pop	r30
 2e6:	bf 91       	pop	r27
 2e8:	af 91       	pop	r26
 2ea:	9f 91       	pop	r25
 2ec:	8f 91       	pop	r24
 2ee:	7f 91       	pop	r23
 2f0:	6f 91       	pop	r22
 2f2:	5f 91       	pop	r21
 2f4:	4f 91       	pop	r20
 2f6:	3f 91       	pop	r19
 2f8:	2f 91       	pop	r18
 2fa:	0f 90       	pop	r0
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	0f 90       	pop	r0
 300:	1f 90       	pop	r1
 302:	18 95       	reti

00000304 <uart_set_baudrate>:
 304:	e8 2f       	mov	r30, r24
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	ee 0f       	add	r30, r30
 30a:	ff 1f       	adc	r31, r31
 30c:	e9 56       	subi	r30, 0x69	; 105
 30e:	ff 4f       	sbci	r31, 0xFF	; 255
 310:	80 81       	ld	r24, Z
 312:	89 b9       	out	0x09, r24	; 9
 314:	81 81       	ldd	r24, Z+1	; 0x01
 316:	80 bd       	out	0x20, r24	; 32
 318:	08 95       	ret

0000031a <uart_init>:
 31a:	86 e8       	ldi	r24, 0x86	; 134
 31c:	80 bd       	out	0x20, r24	; 32
 31e:	88 e9       	ldi	r24, 0x98	; 152
 320:	8a b9       	out	0x0a, r24	; 10
 322:	1b b8       	out	0x0b, r1	; 11
 324:	40 e4       	ldi	r20, 0x40	; 64
 326:	6a ee       	ldi	r22, 0xEA	; 234
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	81 e3       	ldi	r24, 0x31	; 49
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <fifo_init>
 332:	40 e4       	ldi	r20, 0x40	; 64
 334:	6a ea       	ldi	r22, 0xAA	; 170
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	8a e2       	ldi	r24, 0x2A	; 42
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <fifo_init>
 340:	82 e0       	ldi	r24, 0x02	; 2
 342:	0e 94 82 01 	call	0x304	; 0x304 <uart_set_baudrate>
 346:	08 95       	ret

00000348 <uart_put_string>:
 348:	ff 92       	push	r15
 34a:	0f 93       	push	r16
 34c:	1f 93       	push	r17
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	8c 01       	movw	r16, r24
 354:	fc 01       	movw	r30, r24
 356:	80 81       	ld	r24, Z
 358:	88 23       	and	r24, r24
 35a:	51 f1       	breq	.+84     	; 0x3b0 <uart_put_string+0x68>
 35c:	f1 2c       	mov	r15, r1
 35e:	8a e2       	ldi	r24, 0x2A	; 42
 360:	91 e0       	ldi	r25, 0x01	; 1
 362:	0e 94 25 01 	call	0x24a	; 0x24a <fifo_is_full>
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	d1 f3       	breq	.-12     	; 0x35e <uart_put_string+0x16>
 36a:	0e 94 2a 01 	call	0x254	; 0x254 <disable_UDRE_interupt>
 36e:	e8 01       	movw	r28, r16
 370:	cf 0d       	add	r28, r15
 372:	d1 1d       	adc	r29, r1
 374:	88 81       	ld	r24, Y
 376:	81 11       	cpse	r24, r1
 378:	0d c0       	rjmp	.+26     	; 0x394 <uart_put_string+0x4c>
 37a:	12 c0       	rjmp	.+36     	; 0x3a0 <uart_put_string+0x58>
 37c:	68 81       	ld	r22, Y
 37e:	8a e2       	ldi	r24, 0x2A	; 42
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	0e 94 db 00 	call	0x1b6	; 0x1b6 <fifo_push>
 386:	f3 94       	inc	r15
 388:	e8 01       	movw	r28, r16
 38a:	cf 0d       	add	r28, r15
 38c:	d1 1d       	adc	r29, r1
 38e:	88 81       	ld	r24, Y
 390:	88 23       	and	r24, r24
 392:	31 f0       	breq	.+12     	; 0x3a0 <uart_put_string+0x58>
 394:	8a e2       	ldi	r24, 0x2A	; 42
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	0e 94 25 01 	call	0x24a	; 0x24a <fifo_is_full>
 39c:	88 23       	and	r24, r24
 39e:	71 f3       	breq	.-36     	; 0x37c <uart_put_string+0x34>
 3a0:	0e 94 28 01 	call	0x250	; 0x250 <enable_UDRE_interupt>
 3a4:	f8 01       	movw	r30, r16
 3a6:	ef 0d       	add	r30, r15
 3a8:	f1 1d       	adc	r31, r1
 3aa:	80 81       	ld	r24, Z
 3ac:	81 11       	cpse	r24, r1
 3ae:	d7 cf       	rjmp	.-82     	; 0x35e <uart_put_string+0x16>
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	1f 91       	pop	r17
 3b6:	0f 91       	pop	r16
 3b8:	ff 90       	pop	r15
 3ba:	08 95       	ret

000003bc <uart_get_byte>:
 3bc:	57 98       	cbi	0x0a, 7	; 10
 3be:	81 e3       	ldi	r24, 0x31	; 49
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <fifo_pop>
 3c6:	57 9a       	sbi	0x0a, 7	; 10
 3c8:	08 95       	ret

000003ca <uart_clean_rx_buffer>:
 3ca:	81 e3       	ldi	r24, 0x31	; 49
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	0e 94 1b 01 	call	0x236	; 0x236 <fifo_clean>
 3d2:	08 95       	ret

000003d4 <uart_is_rx_buffer_empty>:
 3d4:	81 e3       	ldi	r24, 0x31	; 49
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	0e 94 22 01 	call	0x244	; 0x244 <fifo_is_empty>
 3dc:	08 95       	ret

000003de <string_length>:
 3de:	dc 01       	movw	r26, r24
 3e0:	8c 91       	ld	r24, X
 3e2:	88 23       	and	r24, r24
 3e4:	49 f0       	breq	.+18     	; 0x3f8 <string_length+0x1a>
 3e6:	80 e0       	ldi	r24, 0x00	; 0
 3e8:	8f 5f       	subi	r24, 0xFF	; 255
 3ea:	fd 01       	movw	r30, r26
 3ec:	e8 0f       	add	r30, r24
 3ee:	f1 1d       	adc	r31, r1
 3f0:	90 81       	ld	r25, Z
 3f2:	91 11       	cpse	r25, r1
 3f4:	f9 cf       	rjmp	.-14     	; 0x3e8 <string_length+0xa>
 3f6:	08 95       	ret
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	08 95       	ret

000003fc <char_to_uint>:
 3fc:	80 53       	subi	r24, 0x30	; 48
 3fe:	8a 30       	cpi	r24, 0x0A	; 10
 400:	08 f0       	brcs	.+2      	; 0x404 <char_to_uint+0x8>
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	08 95       	ret

00000406 <string_to_uint>:
 406:	8f 92       	push	r8
 408:	9f 92       	push	r9
 40a:	af 92       	push	r10
 40c:	bf 92       	push	r11
 40e:	cf 92       	push	r12
 410:	df 92       	push	r13
 412:	ef 92       	push	r14
 414:	ff 92       	push	r15
 416:	1f 93       	push	r17
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
 41c:	ec 01       	movw	r28, r24
 41e:	0e 94 ef 01 	call	0x3de	; 0x3de <string_length>
 422:	18 2f       	mov	r17, r24
 424:	88 23       	and	r24, r24
 426:	71 f1       	breq	.+92     	; 0x484 <string_to_uint+0x7e>
 428:	81 2c       	mov	r8, r1
 42a:	91 2c       	mov	r9, r1
 42c:	54 01       	movw	r10, r8
 42e:	c1 2c       	mov	r12, r1
 430:	d1 2c       	mov	r13, r1
 432:	76 01       	movw	r14, r12
 434:	c3 94       	inc	r12
 436:	fe 01       	movw	r30, r28
 438:	e1 0f       	add	r30, r17
 43a:	f1 1d       	adc	r31, r1
 43c:	31 97       	sbiw	r30, 0x01	; 1
 43e:	80 81       	ld	r24, Z
 440:	0e 94 fe 01 	call	0x3fc	; 0x3fc <char_to_uint>
 444:	a8 2f       	mov	r26, r24
 446:	b0 e0       	ldi	r27, 0x00	; 0
 448:	a7 01       	movw	r20, r14
 44a:	96 01       	movw	r18, r12
 44c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__muluhisi3>
 450:	86 0e       	add	r8, r22
 452:	97 1e       	adc	r9, r23
 454:	a8 1e       	adc	r10, r24
 456:	b9 1e       	adc	r11, r25
 458:	11 50       	subi	r17, 0x01	; 1
 45a:	cc 0c       	add	r12, r12
 45c:	dd 1c       	adc	r13, r13
 45e:	ee 1c       	adc	r14, r14
 460:	ff 1c       	adc	r15, r15
 462:	d7 01       	movw	r26, r14
 464:	c6 01       	movw	r24, r12
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	aa 1f       	adc	r26, r26
 46c:	bb 1f       	adc	r27, r27
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	aa 1f       	adc	r26, r26
 474:	bb 1f       	adc	r27, r27
 476:	c8 0e       	add	r12, r24
 478:	d9 1e       	adc	r13, r25
 47a:	ea 1e       	adc	r14, r26
 47c:	fb 1e       	adc	r15, r27
 47e:	11 11       	cpse	r17, r1
 480:	da cf       	rjmp	.-76     	; 0x436 <string_to_uint+0x30>
 482:	03 c0       	rjmp	.+6      	; 0x48a <string_to_uint+0x84>
 484:	81 2c       	mov	r8, r1
 486:	91 2c       	mov	r9, r1
 488:	54 01       	movw	r10, r8
 48a:	68 2d       	mov	r22, r8
 48c:	79 2d       	mov	r23, r9
 48e:	8a 2d       	mov	r24, r10
 490:	9b 2d       	mov	r25, r11
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	1f 91       	pop	r17
 498:	ff 90       	pop	r15
 49a:	ef 90       	pop	r14
 49c:	df 90       	pop	r13
 49e:	cf 90       	pop	r12
 4a0:	bf 90       	pop	r11
 4a2:	af 90       	pop	r10
 4a4:	9f 90       	pop	r9
 4a6:	8f 90       	pop	r8
 4a8:	08 95       	ret

000004aa <initializeAirboat>:

/************************************************************************/
/* Initialize the airboat microcontroller                               */
/************************************************************************/
void initializeAirboat(){
	adc_init();
 4aa:	0e 94 49 00 	call	0x92	; 0x92 <adc_init>
	pwm_init(1,1);
 4ae:	61 e0       	ldi	r22, 0x01	; 1
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	0e 94 9e 00 	call	0x13c	; 0x13c <pwm_init>
	uart_init();
 4b6:	0e 94 8d 01 	call	0x31a	; 0x31a <uart_init>
	uart_clean_rx_buffer();
 4ba:	0e 94 e5 01 	call	0x3ca	; 0x3ca <uart_clean_rx_buffer>
	servo_init();
 4be:	0e 94 5d 00 	call	0xba	; 0xba <servo_init>
	SREG = set_bit(SREG, 7);
 4c2:	8f b7       	in	r24, 0x3f	; 63
 4c4:	80 68       	ori	r24, 0x80	; 128
 4c6:	8f bf       	out	0x3f, r24	; 63
	uart_set_baudrate(BAUDRATE_9600);
 4c8:	82 e0       	ldi	r24, 0x02	; 2
 4ca:	0e 94 82 01 	call	0x304	; 0x304 <uart_set_baudrate>
	OSCCAL = OSCCAL + 6; // Frequency calibration of the microcontroller
 4ce:	81 b7       	in	r24, 0x31	; 49
 4d0:	8a 5f       	subi	r24, 0xFA	; 250
 4d2:	81 bf       	out	0x31, r24	; 49
	DDRD = set_bit(DDRD, PD2);
 4d4:	8a 9a       	sbi	0x11, 2	; 17
	PORTD = clear_bit(PORTD, PD2);
 4d6:	92 98       	cbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d8:	2f ef       	ldi	r18, 0xFF	; 255
 4da:	8e e9       	ldi	r24, 0x9E	; 158
 4dc:	94 e2       	ldi	r25, 0x24	; 36
 4de:	21 50       	subi	r18, 0x01	; 1
 4e0:	80 40       	sbci	r24, 0x00	; 0
 4e2:	90 40       	sbci	r25, 0x00	; 0
 4e4:	e1 f7       	brne	.-8      	; 0x4de <initializeAirboat+0x34>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <initializeAirboat+0x3e>
 4e8:	00 00       	nop
	_delay_ms(1500);
	PORTD = set_bit(PORTD, PD2);
 4ea:	92 9a       	sbi	0x12, 2	; 18
 4ec:	2f ef       	ldi	r18, 0xFF	; 255
 4ee:	89 e6       	ldi	r24, 0x69	; 105
 4f0:	98 e1       	ldi	r25, 0x18	; 24
 4f2:	21 50       	subi	r18, 0x01	; 1
 4f4:	80 40       	sbci	r24, 0x00	; 0
 4f6:	90 40       	sbci	r25, 0x00	; 0
 4f8:	e1 f7       	brne	.-8      	; 0x4f2 <initializeAirboat+0x48>
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <initializeAirboat+0x52>
 4fc:	00 00       	nop
	_delay_ms(1000);
	uart_put_string("AT+CIPMODE=1\r\n\0"); // Passthrough mode
 4fe:	80 e6       	ldi	r24, 0x60	; 96
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 a4 01 	call	0x348	; 0x348 <uart_put_string>
 506:	2f ef       	ldi	r18, 0xFF	; 255
 508:	88 e0       	ldi	r24, 0x08	; 8
 50a:	9d e3       	ldi	r25, 0x3D	; 61
 50c:	21 50       	subi	r18, 0x01	; 1
 50e:	80 40       	sbci	r24, 0x00	; 0
 510:	90 40       	sbci	r25, 0x00	; 0
 512:	e1 f7       	brne	.-8      	; 0x50c <initializeAirboat+0x62>
 514:	00 c0       	rjmp	.+0      	; 0x516 <initializeAirboat+0x6c>
 516:	00 00       	nop
	_delay_ms(2500);
	uart_put_string("AT+CIPSTART=\"UDP\",\"0.0.0.0\",123,456\r\n\0"); // Set the UDP transmission
 518:	80 e7       	ldi	r24, 0x70	; 112
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 a4 01 	call	0x348	; 0x348 <uart_put_string>
 520:	2f ef       	ldi	r18, 0xFF	; 255
 522:	89 e6       	ldi	r24, 0x69	; 105
 524:	98 e1       	ldi	r25, 0x18	; 24
 526:	21 50       	subi	r18, 0x01	; 1
 528:	80 40       	sbci	r24, 0x00	; 0
 52a:	90 40       	sbci	r25, 0x00	; 0
 52c:	e1 f7       	brne	.-8      	; 0x526 <initializeAirboat+0x7c>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <initializeAirboat+0x86>
 530:	00 00       	nop
	_delay_ms(1000);
	DDRB = set_bit(DDRB,PB0);
 532:	b8 9a       	sbi	0x17, 0	; 23
	DDRB = set_bit(DDRB,PB1);
 534:	b9 9a       	sbi	0x17, 1	; 23
	DDRB = set_bit(DDRB,PB2);
 536:	ba 9a       	sbi	0x17, 2	; 23
	DDRB = set_bit(DDRB,PB3);
 538:	bb 9a       	sbi	0x17, 3	; 23
	DDRB = set_bit(DDRB,PB4);
 53a:	bc 9a       	sbi	0x17, 4	; 23
	aNbChar = 0;
 53c:	10 92 3f 01 	sts	0x013F, r1
	aFlyMode = '0';
 540:	80 e3       	ldi	r24, 0x30	; 48
 542:	80 93 47 01 	sts	0x0147, r24
	aHorizontalValue = 128;
 546:	80 e8       	ldi	r24, 0x80	; 128
 548:	80 93 4b 01 	sts	0x014B, r24
	aVerticalValue = 0;
 54c:	10 92 38 01 	sts	0x0138, r1
	firstLoop = 1;
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	80 93 39 01 	sts	0x0139, r24
	loopCount = 0;
 556:	10 92 40 01 	sts	0x0140, r1
	cutEngines = 0;
 55a:	10 92 48 01 	sts	0x0148, r1
	aReceptionState = WAIT_OPEN_BRACKET;
 55e:	80 93 49 01 	sts	0x0149, r24
	PORTB = set_bit(PORTB, 0);
 562:	c0 9a       	sbi	0x18, 0	; 24
	emergencyBrake = 0;
 564:	10 92 4a 01 	sts	0x014A, r1
	tempStoredLift = 0;
 568:	10 92 3a 01 	sts	0x013A, r1
 56c:	08 95       	ret

0000056e <waitForOpenBrackets>:

/************************************************************************/
/* Wait a data packet                                                   */
/************************************************************************/
void waitForOpenBrackets(){
	if (aText == '[') {
 56e:	80 91 41 01 	lds	r24, 0x0141
 572:	8b 35       	cpi	r24, 0x5B	; 91
 574:	31 f4       	brne	.+12     	; 0x582 <waitForOpenBrackets+0x14>
		PORTB = set_bit(PORTB, 1);
 576:	c1 9a       	sbi	0x18, 1	; 24
		aReceptionState = READ_DATA;
 578:	82 e0       	ldi	r24, 0x02	; 2
 57a:	80 93 49 01 	sts	0x0149, r24
		aNbChar = 0;
 57e:	10 92 3f 01 	sts	0x013F, r1
 582:	08 95       	ret

00000584 <readData>:
/************************************************************************/
/* Read data received from the controller                               */
/************************************************************************/
void readData(){
	/* While the data stream does not close... */
	if (aText != ']'){
 584:	90 91 41 01 	lds	r25, 0x0141
 588:	9d 35       	cpi	r25, 0x5D	; 93
 58a:	59 f1       	breq	.+86     	; 0x5e2 <readData+0x5e>
		/* The first 3 characters are the horizontal value to set */
		if (aNbChar < 3){
 58c:	80 91 3f 01 	lds	r24, 0x013F
 590:	83 30       	cpi	r24, 0x03	; 3
 592:	30 f4       	brcc	.+12     	; 0x5a0 <readData+0x1c>
			aHorizontal[aNbChar] = aText;	
 594:	e8 2f       	mov	r30, r24
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	e5 5c       	subi	r30, 0xC5	; 197
 59a:	fe 4f       	sbci	r31, 0xFE	; 254
 59c:	90 83       	st	Z, r25
 59e:	1d c0       	rjmp	.+58     	; 0x5da <readData+0x56>
		/* Characters 3 to 5: the vertical value */
		}else if (aNbChar >= 3 && aNbChar < 6){
 5a0:	28 2f       	mov	r18, r24
 5a2:	23 50       	subi	r18, 0x03	; 3
 5a4:	23 30       	cpi	r18, 0x03	; 3
 5a6:	30 f4       	brcc	.+12     	; 0x5b4 <readData+0x30>
			aVertical[aNbChar - 3] = aText;
 5a8:	e8 2f       	mov	r30, r24
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	e1 5c       	subi	r30, 0xC1	; 193
 5ae:	fe 4f       	sbci	r31, 0xFE	; 254
 5b0:	90 83       	st	Z, r25
 5b2:	13 c0       	rjmp	.+38     	; 0x5da <readData+0x56>
		/* The last character define the fly mode */
		}else if (aNbChar >= 6){
 5b4:	86 30       	cpi	r24, 0x06	; 6
 5b6:	88 f0       	brcs	.+34     	; 0x5da <readData+0x56>
			/* Detect an emergency brake */
			if(aText == 'B'){
 5b8:	92 34       	cpi	r25, 0x42	; 66
 5ba:	21 f4       	brne	.+8      	; 0x5c4 <readData+0x40>
				emergencyBrake = 1;
 5bc:	91 e0       	ldi	r25, 0x01	; 1
 5be:	90 93 4a 01 	sts	0x014A, r25
 5c2:	0b c0       	rjmp	.+22     	; 0x5da <readData+0x56>
			}else{
				emergencyBrake = 0;
 5c4:	10 92 4a 01 	sts	0x014A, r1
				if (aText == 'L'){
 5c8:	9c 34       	cpi	r25, 0x4C	; 76
 5ca:	21 f4       	brne	.+8      	; 0x5d4 <readData+0x50>
					aFlyMode = '1'; // LIFT MODE
 5cc:	91 e3       	ldi	r25, 0x31	; 49
 5ce:	90 93 47 01 	sts	0x0147, r25
 5d2:	03 c0       	rjmp	.+6      	; 0x5da <readData+0x56>
					}else{
					aFlyMode = '0'; // SPEED MODE
 5d4:	90 e3       	ldi	r25, 0x30	; 48
 5d6:	90 93 47 01 	sts	0x0147, r25
				}
			}
			
		}
		/* Increment the index in the data stream */
		aNbChar++;
 5da:	8f 5f       	subi	r24, 0xFF	; 255
 5dc:	80 93 3f 01 	sts	0x013F, r24
 5e0:	08 95       	ret
	}
	else {
		/* Reinitialize the index when the data stream is closed*/
		aNbChar = 0;
 5e2:	10 92 3f 01 	sts	0x013F, r1
		aReceptionState = PROCESS_DATA;
 5e6:	83 e0       	ldi	r24, 0x03	; 3
 5e8:	80 93 49 01 	sts	0x0149, r24
 5ec:	08 95       	ret

000005ee <processData>:

/************************************************************************/
/* Process the data received from the controller                        */
/************************************************************************/
void processData(){
	aHorizontal[3] = 0;
 5ee:	10 92 3e 01 	sts	0x013E, r1
	aVertical[3] = 0;
 5f2:	10 92 45 01 	sts	0x0145, r1
	uart_clean_rx_buffer();	
 5f6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <uart_clean_rx_buffer>
	aReceptionState = WAIT_OPEN_BRACKET;
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	80 93 49 01 	sts	0x0149, r24
	aHorizontalValue = string_to_uint(aHorizontal);
 600:	8b e3       	ldi	r24, 0x3B	; 59
 602:	91 e0       	ldi	r25, 0x01	; 1
 604:	0e 94 03 02 	call	0x406	; 0x406 <string_to_uint>
 608:	60 93 4b 01 	sts	0x014B, r22
	aVerticalValue = string_to_uint(aVertical);
 60c:	82 e4       	ldi	r24, 0x42	; 66
 60e:	91 e0       	ldi	r25, 0x01	; 1
 610:	0e 94 03 02 	call	0x406	; 0x406 <string_to_uint>
 614:	60 93 38 01 	sts	0x0138, r22
 618:	08 95       	ret

0000061a <getMaxBatteryValue>:

/**************************************************************************/
/* Returns the maximum value between 0 and 255 that the battery can output*/
/**************************************************************************/
uint8_t getMaxBatteryValue(uint8_t maxTension){
	return  maxTension * 0.232558f / 3.3f * 255;
 61a:	68 2f       	mov	r22, r24
 61c:	70 e0       	ldi	r23, 0x00	; 0
 61e:	80 e0       	ldi	r24, 0x00	; 0
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__floatsisf>
 626:	2f ea       	ldi	r18, 0xAF	; 175
 628:	33 e2       	ldi	r19, 0x23	; 35
 62a:	4e e6       	ldi	r20, 0x6E	; 110
 62c:	5e e3       	ldi	r21, 0x3E	; 62
 62e:	0e 94 69 05 	call	0xad2	; 0xad2 <__mulsf3>
 632:	23 e3       	ldi	r18, 0x33	; 51
 634:	33 e3       	ldi	r19, 0x33	; 51
 636:	43 e5       	ldi	r20, 0x53	; 83
 638:	50 e4       	ldi	r21, 0x40	; 64
 63a:	0e 94 42 04 	call	0x884	; 0x884 <__divsf3>
 63e:	20 e0       	ldi	r18, 0x00	; 0
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	4f e7       	ldi	r20, 0x7F	; 127
 644:	53 e4       	ldi	r21, 0x43	; 67
 646:	0e 94 69 05 	call	0xad2	; 0xad2 <__mulsf3>
 64a:	0e 94 af 04 	call	0x95e	; 0x95e <__fixunssfsi>
 64e:	86 2f       	mov	r24, r22
}
 650:	08 95       	ret

00000652 <getRealBatteryTension>:
}

/************************************************************************/
/* Returns the real battery tension                                     */
/************************************************************************/
uint8_t getRealBatteryTension(uint8_t adcValue, uint8_t maxTension){
 652:	cf 92       	push	r12
 654:	df 92       	push	r13
 656:	ef 92       	push	r14
 658:	ff 92       	push	r15
 65a:	cf 93       	push	r28
 65c:	df 93       	push	r29
 65e:	f8 2e       	mov	r15, r24
 660:	c6 2f       	mov	r28, r22
	return  (int)((float)adcValue * 10 / (float)getMaxBatteryValue(maxTension) * maxTension ) ; // For more precision, output the value x10
 662:	86 2f       	mov	r24, r22
 664:	0e 94 0d 03 	call	0x61a	; 0x61a <getMaxBatteryValue>
 668:	d8 2f       	mov	r29, r24
 66a:	6f 2d       	mov	r22, r15
 66c:	70 e0       	ldi	r23, 0x00	; 0
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__floatunsisf>
 676:	20 e0       	ldi	r18, 0x00	; 0
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	40 e2       	ldi	r20, 0x20	; 32
 67c:	51 e4       	ldi	r21, 0x41	; 65
 67e:	0e 94 69 05 	call	0xad2	; 0xad2 <__mulsf3>
 682:	6b 01       	movw	r12, r22
 684:	7c 01       	movw	r14, r24
 686:	6d 2f       	mov	r22, r29
 688:	70 e0       	ldi	r23, 0x00	; 0
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <__floatunsisf>
 692:	9b 01       	movw	r18, r22
 694:	ac 01       	movw	r20, r24
 696:	c7 01       	movw	r24, r14
 698:	b6 01       	movw	r22, r12
 69a:	0e 94 42 04 	call	0x884	; 0x884 <__divsf3>
 69e:	6b 01       	movw	r12, r22
 6a0:	7c 01       	movw	r14, r24
 6a2:	6c 2f       	mov	r22, r28
 6a4:	70 e0       	ldi	r23, 0x00	; 0
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__floatsisf>
 6ae:	9b 01       	movw	r18, r22
 6b0:	ac 01       	movw	r20, r24
 6b2:	c7 01       	movw	r24, r14
 6b4:	b6 01       	movw	r22, r12
 6b6:	0e 94 69 05 	call	0xad2	; 0xad2 <__mulsf3>
 6ba:	0e 94 aa 04 	call	0x954	; 0x954 <__fixsfsi>
}
 6be:	86 2f       	mov	r24, r22
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	ff 90       	pop	r15
 6c6:	ef 90       	pop	r14
 6c8:	df 90       	pop	r13
 6ca:	cf 90       	pop	r12
 6cc:	08 95       	ret

000006ce <batteryProtection>:
/************************************************************************/
/* This method protect the battery from undervoltage by 
shutting down the engine at 6V                                          */
/************************************************************************/
void batteryProtection(){
	mBatterie = getRealBatteryTension(adc_read(PA3), 9);
 6ce:	83 e0       	ldi	r24, 0x03	; 3
 6d0:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_read>
 6d4:	69 e0       	ldi	r22, 0x09	; 9
 6d6:	0e 94 29 03 	call	0x652	; 0x652 <getRealBatteryTension>
 6da:	80 93 46 01 	sts	0x0146, r24
	if(mBatterie < 63){
 6de:	8f 33       	cpi	r24, 0x3F	; 63
 6e0:	a8 f4       	brcc	.+42     	; 0x70c <batteryProtection+0x3e>
		if(mBatterie < 60){
 6e2:	8c 33       	cpi	r24, 0x3C	; 60
 6e4:	80 f4       	brcc	.+32     	; 0x706 <batteryProtection+0x38>
			cutEngines = 1;
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	80 93 48 01 	sts	0x0148, r24
			if(loopCount < 100){
 6ec:	80 91 40 01 	lds	r24, 0x0140
 6f0:	84 36       	cpi	r24, 0x64	; 100
 6f2:	10 f4       	brcc	.+4      	; 0x6f8 <batteryProtection+0x2a>
				PORTB = set_bit(PORTB, 4);
 6f4:	c4 9a       	sbi	0x18, 4	; 24
 6f6:	01 c0       	rjmp	.+2      	; 0x6fa <batteryProtection+0x2c>
				}else{
				PORTB = clear_bit(PORTB, 4);
 6f8:	c4 98       	cbi	0x18, 4	; 24
				if(loopCount == 600){
					loopCount = 0;
				}
			}
			loopCount++;
 6fa:	80 91 40 01 	lds	r24, 0x0140
 6fe:	8f 5f       	subi	r24, 0xFF	; 255
 700:	80 93 40 01 	sts	0x0140, r24
 704:	08 95       	ret
		}
		else{
			cutEngines = 0;
 706:	10 92 48 01 	sts	0x0148, r1
			PORTB = set_bit(PORTB,4);
 70a:	c4 9a       	sbi	0x18, 4	; 24
 70c:	08 95       	ret

0000070e <main>:
void batteryProtection();

int main(void)
{
	/* ================ Initialize all the values and microcontroller ports on the ATMEGA32 ================ */
	initializeAirboat();
 70e:	0e 94 55 02 	call	0x4aa	; 0x4aa <initializeAirboat>
	
	/* ================ Microcontroller loop ================ */
	while(1){
		/* ================== ASSIGNATION DES MOTEURS ================== */
		if(!cutEngines){
 712:	80 91 48 01 	lds	r24, 0x0148
 716:	81 11       	cpse	r24, r1
 718:	2f c0       	rjmp	.+94     	; 0x778 <main+0x6a>
			if(emergencyBrake){
 71a:	80 91 4a 01 	lds	r24, 0x014A
 71e:	88 23       	and	r24, r24
 720:	21 f0       	breq	.+8      	; 0x72a <main+0x1c>
				pwm_set_a(0);
 722:	80 e0       	ldi	r24, 0x00	; 0
 724:	0e 94 b7 00 	call	0x16e	; 0x16e <pwm_set_a>
 728:	23 c0       	rjmp	.+70     	; 0x770 <main+0x62>
			}else{
				if (aFlyMode == '1') {
 72a:	80 91 47 01 	lds	r24, 0x0147
 72e:	81 33       	cpi	r24, 0x31	; 49
 730:	61 f4       	brne	.+24     	; 0x74a <main+0x3c>
					pwm_set_a(aVerticalValue);
 732:	80 91 38 01 	lds	r24, 0x0138
 736:	0e 94 b7 00 	call	0x16e	; 0x16e <pwm_set_a>
					pwm_set_b(0);
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	0e 94 c4 00 	call	0x188	; 0x188 <pwm_set_b>
					tempStoredLift = aVerticalValue;
 740:	80 91 38 01 	lds	r24, 0x0138
 744:	80 93 3a 01 	sts	0x013A, r24
 748:	13 c0       	rjmp	.+38     	; 0x770 <main+0x62>
				}
				else if (aFlyMode == '0') {
 74a:	80 33       	cpi	r24, 0x30	; 48
 74c:	89 f4       	brne	.+34     	; 0x770 <main+0x62>
					pwm_set_b(aVerticalValue);
 74e:	80 91 38 01 	lds	r24, 0x0138
 752:	0e 94 c4 00 	call	0x188	; 0x188 <pwm_set_b>
					if(aHorizontalValue < 64 || aHorizontalValue > 192){
 756:	80 91 4b 01 	lds	r24, 0x014B
 75a:	80 54       	subi	r24, 0x40	; 64
 75c:	81 38       	cpi	r24, 0x81	; 129
 75e:	20 f0       	brcs	.+8      	; 0x768 <main+0x5a>
						pwm_set_a(55);
 760:	87 e3       	ldi	r24, 0x37	; 55
 762:	0e 94 b7 00 	call	0x16e	; 0x16e <pwm_set_a>
 766:	04 c0       	rjmp	.+8      	; 0x770 <main+0x62>
					}else{
						pwm_set_a(tempStoredLift);
 768:	80 91 3a 01 	lds	r24, 0x013A
 76c:	0e 94 b7 00 	call	0x16e	; 0x16e <pwm_set_a>
					
					
				}
			}
			
			servo_set_a(aHorizontalValue);
 770:	80 91 4b 01 	lds	r24, 0x014B
 774:	0e 94 87 00 	call	0x10e	; 0x10e <servo_set_a>
		}
		
		/* ================== DATA RECEPTION ================== */
			// If the reception buffer is not empty (we have received data)
		if(!uart_is_rx_buffer_empty() && firstLoop != 1) {
 778:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <uart_is_rx_buffer_empty>
 77c:	81 11       	cpse	r24, r1
 77e:	18 c0       	rjmp	.+48     	; 0x7b0 <main+0xa2>
 780:	80 91 39 01 	lds	r24, 0x0139
 784:	81 30       	cpi	r24, 0x01	; 1
 786:	a1 f0       	breq	.+40     	; 0x7b0 <main+0xa2>
			//Get the byte from UART
			aText = uart_get_byte();
 788:	0e 94 de 01 	call	0x3bc	; 0x3bc <uart_get_byte>
 78c:	80 93 41 01 	sts	0x0141, r24
			switch (aReceptionState) {
 790:	80 91 49 01 	lds	r24, 0x0149
 794:	82 30       	cpi	r24, 0x02	; 2
 796:	39 f0       	breq	.+14     	; 0x7a6 <main+0x98>
 798:	83 30       	cpi	r24, 0x03	; 3
 79a:	41 f0       	breq	.+16     	; 0x7ac <main+0x9e>
 79c:	81 30       	cpi	r24, 0x01	; 1
 79e:	41 f4       	brne	.+16     	; 0x7b0 <main+0xa2>
				/* ================== Wait for start of data stream ================== */
				case WAIT_OPEN_BRACKET:waitForOpenBrackets();break;
 7a0:	0e 94 b7 02 	call	0x56e	; 0x56e <waitForOpenBrackets>
 7a4:	05 c0       	rjmp	.+10     	; 0x7b0 <main+0xa2>
				
				/* ================== Read data ==================== */
				case READ_DATA: readData();break;
 7a6:	0e 94 c2 02 	call	0x584	; 0x584 <readData>
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <main+0xa2>
				
				/* ================== Process data ================== */
				case PROCESS_DATA: processData();break;
 7ac:	0e 94 f7 02 	call	0x5ee	; 0x5ee <processData>
			
		
		}
		
		/* ========== Protect the battery from undervoltage (cut the engines at 6V) ============= */
		batteryProtection();
 7b0:	0e 94 67 03 	call	0x6ce	; 0x6ce <batteryProtection>
	
		firstLoop = 0;
 7b4:	10 92 39 01 	sts	0x0139, r1
	}
 7b8:	ac cf       	rjmp	.-168    	; 0x712 <main+0x4>

000007ba <__subsf3>:
 7ba:	50 58       	subi	r21, 0x80	; 128

000007bc <__addsf3>:
 7bc:	bb 27       	eor	r27, r27
 7be:	aa 27       	eor	r26, r26
 7c0:	0e d0       	rcall	.+28     	; 0x7de <__addsf3x>
 7c2:	4d c1       	rjmp	.+666    	; 0xa5e <__fp_round>
 7c4:	3e d1       	rcall	.+636    	; 0xa42 <__fp_pscA>
 7c6:	30 f0       	brcs	.+12     	; 0x7d4 <__addsf3+0x18>
 7c8:	43 d1       	rcall	.+646    	; 0xa50 <__fp_pscB>
 7ca:	20 f0       	brcs	.+8      	; 0x7d4 <__addsf3+0x18>
 7cc:	31 f4       	brne	.+12     	; 0x7da <__addsf3+0x1e>
 7ce:	9f 3f       	cpi	r25, 0xFF	; 255
 7d0:	11 f4       	brne	.+4      	; 0x7d6 <__addsf3+0x1a>
 7d2:	1e f4       	brtc	.+6      	; 0x7da <__addsf3+0x1e>
 7d4:	33 c1       	rjmp	.+614    	; 0xa3c <__fp_nan>
 7d6:	0e f4       	brtc	.+2      	; 0x7da <__addsf3+0x1e>
 7d8:	e0 95       	com	r30
 7da:	e7 fb       	bst	r30, 7
 7dc:	29 c1       	rjmp	.+594    	; 0xa30 <__fp_inf>

000007de <__addsf3x>:
 7de:	e9 2f       	mov	r30, r25
 7e0:	4f d1       	rcall	.+670    	; 0xa80 <__fp_split3>
 7e2:	80 f3       	brcs	.-32     	; 0x7c4 <__addsf3+0x8>
 7e4:	ba 17       	cp	r27, r26
 7e6:	62 07       	cpc	r22, r18
 7e8:	73 07       	cpc	r23, r19
 7ea:	84 07       	cpc	r24, r20
 7ec:	95 07       	cpc	r25, r21
 7ee:	18 f0       	brcs	.+6      	; 0x7f6 <__addsf3x+0x18>
 7f0:	71 f4       	brne	.+28     	; 0x80e <__addsf3x+0x30>
 7f2:	9e f5       	brtc	.+102    	; 0x85a <__addsf3x+0x7c>
 7f4:	67 c1       	rjmp	.+718    	; 0xac4 <__fp_zero>
 7f6:	0e f4       	brtc	.+2      	; 0x7fa <__addsf3x+0x1c>
 7f8:	e0 95       	com	r30
 7fa:	0b 2e       	mov	r0, r27
 7fc:	ba 2f       	mov	r27, r26
 7fe:	a0 2d       	mov	r26, r0
 800:	0b 01       	movw	r0, r22
 802:	b9 01       	movw	r22, r18
 804:	90 01       	movw	r18, r0
 806:	0c 01       	movw	r0, r24
 808:	ca 01       	movw	r24, r20
 80a:	a0 01       	movw	r20, r0
 80c:	11 24       	eor	r1, r1
 80e:	ff 27       	eor	r31, r31
 810:	59 1b       	sub	r21, r25
 812:	99 f0       	breq	.+38     	; 0x83a <__addsf3x+0x5c>
 814:	59 3f       	cpi	r21, 0xF9	; 249
 816:	50 f4       	brcc	.+20     	; 0x82c <__addsf3x+0x4e>
 818:	50 3e       	cpi	r21, 0xE0	; 224
 81a:	68 f1       	brcs	.+90     	; 0x876 <__stack+0x17>
 81c:	1a 16       	cp	r1, r26
 81e:	f0 40       	sbci	r31, 0x00	; 0
 820:	a2 2f       	mov	r26, r18
 822:	23 2f       	mov	r18, r19
 824:	34 2f       	mov	r19, r20
 826:	44 27       	eor	r20, r20
 828:	58 5f       	subi	r21, 0xF8	; 248
 82a:	f3 cf       	rjmp	.-26     	; 0x812 <__addsf3x+0x34>
 82c:	46 95       	lsr	r20
 82e:	37 95       	ror	r19
 830:	27 95       	ror	r18
 832:	a7 95       	ror	r26
 834:	f0 40       	sbci	r31, 0x00	; 0
 836:	53 95       	inc	r21
 838:	c9 f7       	brne	.-14     	; 0x82c <__addsf3x+0x4e>
 83a:	7e f4       	brtc	.+30     	; 0x85a <__addsf3x+0x7c>
 83c:	1f 16       	cp	r1, r31
 83e:	ba 0b       	sbc	r27, r26
 840:	62 0b       	sbc	r22, r18
 842:	73 0b       	sbc	r23, r19
 844:	84 0b       	sbc	r24, r20
 846:	ba f0       	brmi	.+46     	; 0x876 <__stack+0x17>
 848:	91 50       	subi	r25, 0x01	; 1
 84a:	a1 f0       	breq	.+40     	; 0x874 <__stack+0x15>
 84c:	ff 0f       	add	r31, r31
 84e:	bb 1f       	adc	r27, r27
 850:	66 1f       	adc	r22, r22
 852:	77 1f       	adc	r23, r23
 854:	88 1f       	adc	r24, r24
 856:	c2 f7       	brpl	.-16     	; 0x848 <__addsf3x+0x6a>
 858:	0e c0       	rjmp	.+28     	; 0x876 <__stack+0x17>
 85a:	ba 0f       	add	r27, r26
 85c:	62 1f       	adc	r22, r18
 85e:	73 1f       	adc	r23, r19
 860:	84 1f       	adc	r24, r20
 862:	48 f4       	brcc	.+18     	; 0x876 <__stack+0x17>
 864:	87 95       	ror	r24
 866:	77 95       	ror	r23
 868:	67 95       	ror	r22
 86a:	b7 95       	ror	r27
 86c:	f7 95       	ror	r31
 86e:	9e 3f       	cpi	r25, 0xFE	; 254
 870:	08 f0       	brcs	.+2      	; 0x874 <__stack+0x15>
 872:	b3 cf       	rjmp	.-154    	; 0x7da <__addsf3+0x1e>
 874:	93 95       	inc	r25
 876:	88 0f       	add	r24, r24
 878:	08 f0       	brcs	.+2      	; 0x87c <__stack+0x1d>
 87a:	99 27       	eor	r25, r25
 87c:	ee 0f       	add	r30, r30
 87e:	97 95       	ror	r25
 880:	87 95       	ror	r24
 882:	08 95       	ret

00000884 <__divsf3>:
 884:	0c d0       	rcall	.+24     	; 0x89e <__divsf3x>
 886:	eb c0       	rjmp	.+470    	; 0xa5e <__fp_round>
 888:	e3 d0       	rcall	.+454    	; 0xa50 <__fp_pscB>
 88a:	40 f0       	brcs	.+16     	; 0x89c <__divsf3+0x18>
 88c:	da d0       	rcall	.+436    	; 0xa42 <__fp_pscA>
 88e:	30 f0       	brcs	.+12     	; 0x89c <__divsf3+0x18>
 890:	21 f4       	brne	.+8      	; 0x89a <__divsf3+0x16>
 892:	5f 3f       	cpi	r21, 0xFF	; 255
 894:	19 f0       	breq	.+6      	; 0x89c <__divsf3+0x18>
 896:	cc c0       	rjmp	.+408    	; 0xa30 <__fp_inf>
 898:	51 11       	cpse	r21, r1
 89a:	15 c1       	rjmp	.+554    	; 0xac6 <__fp_szero>
 89c:	cf c0       	rjmp	.+414    	; 0xa3c <__fp_nan>

0000089e <__divsf3x>:
 89e:	f0 d0       	rcall	.+480    	; 0xa80 <__fp_split3>
 8a0:	98 f3       	brcs	.-26     	; 0x888 <__divsf3+0x4>

000008a2 <__divsf3_pse>:
 8a2:	99 23       	and	r25, r25
 8a4:	c9 f3       	breq	.-14     	; 0x898 <__divsf3+0x14>
 8a6:	55 23       	and	r21, r21
 8a8:	b1 f3       	breq	.-20     	; 0x896 <__divsf3+0x12>
 8aa:	95 1b       	sub	r25, r21
 8ac:	55 0b       	sbc	r21, r21
 8ae:	bb 27       	eor	r27, r27
 8b0:	aa 27       	eor	r26, r26
 8b2:	62 17       	cp	r22, r18
 8b4:	73 07       	cpc	r23, r19
 8b6:	84 07       	cpc	r24, r20
 8b8:	38 f0       	brcs	.+14     	; 0x8c8 <__divsf3_pse+0x26>
 8ba:	9f 5f       	subi	r25, 0xFF	; 255
 8bc:	5f 4f       	sbci	r21, 0xFF	; 255
 8be:	22 0f       	add	r18, r18
 8c0:	33 1f       	adc	r19, r19
 8c2:	44 1f       	adc	r20, r20
 8c4:	aa 1f       	adc	r26, r26
 8c6:	a9 f3       	breq	.-22     	; 0x8b2 <__divsf3_pse+0x10>
 8c8:	33 d0       	rcall	.+102    	; 0x930 <__divsf3_pse+0x8e>
 8ca:	0e 2e       	mov	r0, r30
 8cc:	3a f0       	brmi	.+14     	; 0x8dc <__divsf3_pse+0x3a>
 8ce:	e0 e8       	ldi	r30, 0x80	; 128
 8d0:	30 d0       	rcall	.+96     	; 0x932 <__divsf3_pse+0x90>
 8d2:	91 50       	subi	r25, 0x01	; 1
 8d4:	50 40       	sbci	r21, 0x00	; 0
 8d6:	e6 95       	lsr	r30
 8d8:	00 1c       	adc	r0, r0
 8da:	ca f7       	brpl	.-14     	; 0x8ce <__divsf3_pse+0x2c>
 8dc:	29 d0       	rcall	.+82     	; 0x930 <__divsf3_pse+0x8e>
 8de:	fe 2f       	mov	r31, r30
 8e0:	27 d0       	rcall	.+78     	; 0x930 <__divsf3_pse+0x8e>
 8e2:	66 0f       	add	r22, r22
 8e4:	77 1f       	adc	r23, r23
 8e6:	88 1f       	adc	r24, r24
 8e8:	bb 1f       	adc	r27, r27
 8ea:	26 17       	cp	r18, r22
 8ec:	37 07       	cpc	r19, r23
 8ee:	48 07       	cpc	r20, r24
 8f0:	ab 07       	cpc	r26, r27
 8f2:	b0 e8       	ldi	r27, 0x80	; 128
 8f4:	09 f0       	breq	.+2      	; 0x8f8 <__divsf3_pse+0x56>
 8f6:	bb 0b       	sbc	r27, r27
 8f8:	80 2d       	mov	r24, r0
 8fa:	bf 01       	movw	r22, r30
 8fc:	ff 27       	eor	r31, r31
 8fe:	93 58       	subi	r25, 0x83	; 131
 900:	5f 4f       	sbci	r21, 0xFF	; 255
 902:	2a f0       	brmi	.+10     	; 0x90e <__divsf3_pse+0x6c>
 904:	9e 3f       	cpi	r25, 0xFE	; 254
 906:	51 05       	cpc	r21, r1
 908:	68 f0       	brcs	.+26     	; 0x924 <__divsf3_pse+0x82>
 90a:	92 c0       	rjmp	.+292    	; 0xa30 <__fp_inf>
 90c:	dc c0       	rjmp	.+440    	; 0xac6 <__fp_szero>
 90e:	5f 3f       	cpi	r21, 0xFF	; 255
 910:	ec f3       	brlt	.-6      	; 0x90c <__divsf3_pse+0x6a>
 912:	98 3e       	cpi	r25, 0xE8	; 232
 914:	dc f3       	brlt	.-10     	; 0x90c <__divsf3_pse+0x6a>
 916:	86 95       	lsr	r24
 918:	77 95       	ror	r23
 91a:	67 95       	ror	r22
 91c:	b7 95       	ror	r27
 91e:	f7 95       	ror	r31
 920:	9f 5f       	subi	r25, 0xFF	; 255
 922:	c9 f7       	brne	.-14     	; 0x916 <__divsf3_pse+0x74>
 924:	88 0f       	add	r24, r24
 926:	91 1d       	adc	r25, r1
 928:	96 95       	lsr	r25
 92a:	87 95       	ror	r24
 92c:	97 f9       	bld	r25, 7
 92e:	08 95       	ret
 930:	e1 e0       	ldi	r30, 0x01	; 1
 932:	66 0f       	add	r22, r22
 934:	77 1f       	adc	r23, r23
 936:	88 1f       	adc	r24, r24
 938:	bb 1f       	adc	r27, r27
 93a:	62 17       	cp	r22, r18
 93c:	73 07       	cpc	r23, r19
 93e:	84 07       	cpc	r24, r20
 940:	ba 07       	cpc	r27, r26
 942:	20 f0       	brcs	.+8      	; 0x94c <__divsf3_pse+0xaa>
 944:	62 1b       	sub	r22, r18
 946:	73 0b       	sbc	r23, r19
 948:	84 0b       	sbc	r24, r20
 94a:	ba 0b       	sbc	r27, r26
 94c:	ee 1f       	adc	r30, r30
 94e:	88 f7       	brcc	.-30     	; 0x932 <__divsf3_pse+0x90>
 950:	e0 95       	com	r30
 952:	08 95       	ret

00000954 <__fixsfsi>:
 954:	04 d0       	rcall	.+8      	; 0x95e <__fixunssfsi>
 956:	68 94       	set
 958:	b1 11       	cpse	r27, r1
 95a:	b5 c0       	rjmp	.+362    	; 0xac6 <__fp_szero>
 95c:	08 95       	ret

0000095e <__fixunssfsi>:
 95e:	98 d0       	rcall	.+304    	; 0xa90 <__fp_splitA>
 960:	88 f0       	brcs	.+34     	; 0x984 <__fixunssfsi+0x26>
 962:	9f 57       	subi	r25, 0x7F	; 127
 964:	90 f0       	brcs	.+36     	; 0x98a <__fixunssfsi+0x2c>
 966:	b9 2f       	mov	r27, r25
 968:	99 27       	eor	r25, r25
 96a:	b7 51       	subi	r27, 0x17	; 23
 96c:	a0 f0       	brcs	.+40     	; 0x996 <__fixunssfsi+0x38>
 96e:	d1 f0       	breq	.+52     	; 0x9a4 <__fixunssfsi+0x46>
 970:	66 0f       	add	r22, r22
 972:	77 1f       	adc	r23, r23
 974:	88 1f       	adc	r24, r24
 976:	99 1f       	adc	r25, r25
 978:	1a f0       	brmi	.+6      	; 0x980 <__fixunssfsi+0x22>
 97a:	ba 95       	dec	r27
 97c:	c9 f7       	brne	.-14     	; 0x970 <__fixunssfsi+0x12>
 97e:	12 c0       	rjmp	.+36     	; 0x9a4 <__fixunssfsi+0x46>
 980:	b1 30       	cpi	r27, 0x01	; 1
 982:	81 f0       	breq	.+32     	; 0x9a4 <__fixunssfsi+0x46>
 984:	9f d0       	rcall	.+318    	; 0xac4 <__fp_zero>
 986:	b1 e0       	ldi	r27, 0x01	; 1
 988:	08 95       	ret
 98a:	9c c0       	rjmp	.+312    	; 0xac4 <__fp_zero>
 98c:	67 2f       	mov	r22, r23
 98e:	78 2f       	mov	r23, r24
 990:	88 27       	eor	r24, r24
 992:	b8 5f       	subi	r27, 0xF8	; 248
 994:	39 f0       	breq	.+14     	; 0x9a4 <__fixunssfsi+0x46>
 996:	b9 3f       	cpi	r27, 0xF9	; 249
 998:	cc f3       	brlt	.-14     	; 0x98c <__fixunssfsi+0x2e>
 99a:	86 95       	lsr	r24
 99c:	77 95       	ror	r23
 99e:	67 95       	ror	r22
 9a0:	b3 95       	inc	r27
 9a2:	d9 f7       	brne	.-10     	; 0x99a <__fixunssfsi+0x3c>
 9a4:	3e f4       	brtc	.+14     	; 0x9b4 <__fixunssfsi+0x56>
 9a6:	90 95       	com	r25
 9a8:	80 95       	com	r24
 9aa:	70 95       	com	r23
 9ac:	61 95       	neg	r22
 9ae:	7f 4f       	sbci	r23, 0xFF	; 255
 9b0:	8f 4f       	sbci	r24, 0xFF	; 255
 9b2:	9f 4f       	sbci	r25, 0xFF	; 255
 9b4:	08 95       	ret

000009b6 <__floatunsisf>:
 9b6:	e8 94       	clt
 9b8:	09 c0       	rjmp	.+18     	; 0x9cc <__floatsisf+0x12>

000009ba <__floatsisf>:
 9ba:	97 fb       	bst	r25, 7
 9bc:	3e f4       	brtc	.+14     	; 0x9cc <__floatsisf+0x12>
 9be:	90 95       	com	r25
 9c0:	80 95       	com	r24
 9c2:	70 95       	com	r23
 9c4:	61 95       	neg	r22
 9c6:	7f 4f       	sbci	r23, 0xFF	; 255
 9c8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ca:	9f 4f       	sbci	r25, 0xFF	; 255
 9cc:	99 23       	and	r25, r25
 9ce:	a9 f0       	breq	.+42     	; 0x9fa <__floatsisf+0x40>
 9d0:	f9 2f       	mov	r31, r25
 9d2:	96 e9       	ldi	r25, 0x96	; 150
 9d4:	bb 27       	eor	r27, r27
 9d6:	93 95       	inc	r25
 9d8:	f6 95       	lsr	r31
 9da:	87 95       	ror	r24
 9dc:	77 95       	ror	r23
 9de:	67 95       	ror	r22
 9e0:	b7 95       	ror	r27
 9e2:	f1 11       	cpse	r31, r1
 9e4:	f8 cf       	rjmp	.-16     	; 0x9d6 <__floatsisf+0x1c>
 9e6:	fa f4       	brpl	.+62     	; 0xa26 <__floatsisf+0x6c>
 9e8:	bb 0f       	add	r27, r27
 9ea:	11 f4       	brne	.+4      	; 0x9f0 <__floatsisf+0x36>
 9ec:	60 ff       	sbrs	r22, 0
 9ee:	1b c0       	rjmp	.+54     	; 0xa26 <__floatsisf+0x6c>
 9f0:	6f 5f       	subi	r22, 0xFF	; 255
 9f2:	7f 4f       	sbci	r23, 0xFF	; 255
 9f4:	8f 4f       	sbci	r24, 0xFF	; 255
 9f6:	9f 4f       	sbci	r25, 0xFF	; 255
 9f8:	16 c0       	rjmp	.+44     	; 0xa26 <__floatsisf+0x6c>
 9fa:	88 23       	and	r24, r24
 9fc:	11 f0       	breq	.+4      	; 0xa02 <__floatsisf+0x48>
 9fe:	96 e9       	ldi	r25, 0x96	; 150
 a00:	11 c0       	rjmp	.+34     	; 0xa24 <__floatsisf+0x6a>
 a02:	77 23       	and	r23, r23
 a04:	21 f0       	breq	.+8      	; 0xa0e <__floatsisf+0x54>
 a06:	9e e8       	ldi	r25, 0x8E	; 142
 a08:	87 2f       	mov	r24, r23
 a0a:	76 2f       	mov	r23, r22
 a0c:	05 c0       	rjmp	.+10     	; 0xa18 <__floatsisf+0x5e>
 a0e:	66 23       	and	r22, r22
 a10:	71 f0       	breq	.+28     	; 0xa2e <__floatsisf+0x74>
 a12:	96 e8       	ldi	r25, 0x86	; 134
 a14:	86 2f       	mov	r24, r22
 a16:	70 e0       	ldi	r23, 0x00	; 0
 a18:	60 e0       	ldi	r22, 0x00	; 0
 a1a:	2a f0       	brmi	.+10     	; 0xa26 <__floatsisf+0x6c>
 a1c:	9a 95       	dec	r25
 a1e:	66 0f       	add	r22, r22
 a20:	77 1f       	adc	r23, r23
 a22:	88 1f       	adc	r24, r24
 a24:	da f7       	brpl	.-10     	; 0xa1c <__floatsisf+0x62>
 a26:	88 0f       	add	r24, r24
 a28:	96 95       	lsr	r25
 a2a:	87 95       	ror	r24
 a2c:	97 f9       	bld	r25, 7
 a2e:	08 95       	ret

00000a30 <__fp_inf>:
 a30:	97 f9       	bld	r25, 7
 a32:	9f 67       	ori	r25, 0x7F	; 127
 a34:	80 e8       	ldi	r24, 0x80	; 128
 a36:	70 e0       	ldi	r23, 0x00	; 0
 a38:	60 e0       	ldi	r22, 0x00	; 0
 a3a:	08 95       	ret

00000a3c <__fp_nan>:
 a3c:	9f ef       	ldi	r25, 0xFF	; 255
 a3e:	80 ec       	ldi	r24, 0xC0	; 192
 a40:	08 95       	ret

00000a42 <__fp_pscA>:
 a42:	00 24       	eor	r0, r0
 a44:	0a 94       	dec	r0
 a46:	16 16       	cp	r1, r22
 a48:	17 06       	cpc	r1, r23
 a4a:	18 06       	cpc	r1, r24
 a4c:	09 06       	cpc	r0, r25
 a4e:	08 95       	ret

00000a50 <__fp_pscB>:
 a50:	00 24       	eor	r0, r0
 a52:	0a 94       	dec	r0
 a54:	12 16       	cp	r1, r18
 a56:	13 06       	cpc	r1, r19
 a58:	14 06       	cpc	r1, r20
 a5a:	05 06       	cpc	r0, r21
 a5c:	08 95       	ret

00000a5e <__fp_round>:
 a5e:	09 2e       	mov	r0, r25
 a60:	03 94       	inc	r0
 a62:	00 0c       	add	r0, r0
 a64:	11 f4       	brne	.+4      	; 0xa6a <__fp_round+0xc>
 a66:	88 23       	and	r24, r24
 a68:	52 f0       	brmi	.+20     	; 0xa7e <__fp_round+0x20>
 a6a:	bb 0f       	add	r27, r27
 a6c:	40 f4       	brcc	.+16     	; 0xa7e <__fp_round+0x20>
 a6e:	bf 2b       	or	r27, r31
 a70:	11 f4       	brne	.+4      	; 0xa76 <__fp_round+0x18>
 a72:	60 ff       	sbrs	r22, 0
 a74:	04 c0       	rjmp	.+8      	; 0xa7e <__fp_round+0x20>
 a76:	6f 5f       	subi	r22, 0xFF	; 255
 a78:	7f 4f       	sbci	r23, 0xFF	; 255
 a7a:	8f 4f       	sbci	r24, 0xFF	; 255
 a7c:	9f 4f       	sbci	r25, 0xFF	; 255
 a7e:	08 95       	ret

00000a80 <__fp_split3>:
 a80:	57 fd       	sbrc	r21, 7
 a82:	90 58       	subi	r25, 0x80	; 128
 a84:	44 0f       	add	r20, r20
 a86:	55 1f       	adc	r21, r21
 a88:	59 f0       	breq	.+22     	; 0xaa0 <__fp_splitA+0x10>
 a8a:	5f 3f       	cpi	r21, 0xFF	; 255
 a8c:	71 f0       	breq	.+28     	; 0xaaa <__fp_splitA+0x1a>
 a8e:	47 95       	ror	r20

00000a90 <__fp_splitA>:
 a90:	88 0f       	add	r24, r24
 a92:	97 fb       	bst	r25, 7
 a94:	99 1f       	adc	r25, r25
 a96:	61 f0       	breq	.+24     	; 0xab0 <__fp_splitA+0x20>
 a98:	9f 3f       	cpi	r25, 0xFF	; 255
 a9a:	79 f0       	breq	.+30     	; 0xaba <__fp_splitA+0x2a>
 a9c:	87 95       	ror	r24
 a9e:	08 95       	ret
 aa0:	12 16       	cp	r1, r18
 aa2:	13 06       	cpc	r1, r19
 aa4:	14 06       	cpc	r1, r20
 aa6:	55 1f       	adc	r21, r21
 aa8:	f2 cf       	rjmp	.-28     	; 0xa8e <__fp_split3+0xe>
 aaa:	46 95       	lsr	r20
 aac:	f1 df       	rcall	.-30     	; 0xa90 <__fp_splitA>
 aae:	08 c0       	rjmp	.+16     	; 0xac0 <__fp_splitA+0x30>
 ab0:	16 16       	cp	r1, r22
 ab2:	17 06       	cpc	r1, r23
 ab4:	18 06       	cpc	r1, r24
 ab6:	99 1f       	adc	r25, r25
 ab8:	f1 cf       	rjmp	.-30     	; 0xa9c <__fp_splitA+0xc>
 aba:	86 95       	lsr	r24
 abc:	71 05       	cpc	r23, r1
 abe:	61 05       	cpc	r22, r1
 ac0:	08 94       	sec
 ac2:	08 95       	ret

00000ac4 <__fp_zero>:
 ac4:	e8 94       	clt

00000ac6 <__fp_szero>:
 ac6:	bb 27       	eor	r27, r27
 ac8:	66 27       	eor	r22, r22
 aca:	77 27       	eor	r23, r23
 acc:	cb 01       	movw	r24, r22
 ace:	97 f9       	bld	r25, 7
 ad0:	08 95       	ret

00000ad2 <__mulsf3>:
 ad2:	0b d0       	rcall	.+22     	; 0xaea <__mulsf3x>
 ad4:	c4 cf       	rjmp	.-120    	; 0xa5e <__fp_round>
 ad6:	b5 df       	rcall	.-150    	; 0xa42 <__fp_pscA>
 ad8:	28 f0       	brcs	.+10     	; 0xae4 <__mulsf3+0x12>
 ada:	ba df       	rcall	.-140    	; 0xa50 <__fp_pscB>
 adc:	18 f0       	brcs	.+6      	; 0xae4 <__mulsf3+0x12>
 ade:	95 23       	and	r25, r21
 ae0:	09 f0       	breq	.+2      	; 0xae4 <__mulsf3+0x12>
 ae2:	a6 cf       	rjmp	.-180    	; 0xa30 <__fp_inf>
 ae4:	ab cf       	rjmp	.-170    	; 0xa3c <__fp_nan>
 ae6:	11 24       	eor	r1, r1
 ae8:	ee cf       	rjmp	.-36     	; 0xac6 <__fp_szero>

00000aea <__mulsf3x>:
 aea:	ca df       	rcall	.-108    	; 0xa80 <__fp_split3>
 aec:	a0 f3       	brcs	.-24     	; 0xad6 <__mulsf3+0x4>

00000aee <__mulsf3_pse>:
 aee:	95 9f       	mul	r25, r21
 af0:	d1 f3       	breq	.-12     	; 0xae6 <__mulsf3+0x14>
 af2:	95 0f       	add	r25, r21
 af4:	50 e0       	ldi	r21, 0x00	; 0
 af6:	55 1f       	adc	r21, r21
 af8:	62 9f       	mul	r22, r18
 afa:	f0 01       	movw	r30, r0
 afc:	72 9f       	mul	r23, r18
 afe:	bb 27       	eor	r27, r27
 b00:	f0 0d       	add	r31, r0
 b02:	b1 1d       	adc	r27, r1
 b04:	63 9f       	mul	r22, r19
 b06:	aa 27       	eor	r26, r26
 b08:	f0 0d       	add	r31, r0
 b0a:	b1 1d       	adc	r27, r1
 b0c:	aa 1f       	adc	r26, r26
 b0e:	64 9f       	mul	r22, r20
 b10:	66 27       	eor	r22, r22
 b12:	b0 0d       	add	r27, r0
 b14:	a1 1d       	adc	r26, r1
 b16:	66 1f       	adc	r22, r22
 b18:	82 9f       	mul	r24, r18
 b1a:	22 27       	eor	r18, r18
 b1c:	b0 0d       	add	r27, r0
 b1e:	a1 1d       	adc	r26, r1
 b20:	62 1f       	adc	r22, r18
 b22:	73 9f       	mul	r23, r19
 b24:	b0 0d       	add	r27, r0
 b26:	a1 1d       	adc	r26, r1
 b28:	62 1f       	adc	r22, r18
 b2a:	83 9f       	mul	r24, r19
 b2c:	a0 0d       	add	r26, r0
 b2e:	61 1d       	adc	r22, r1
 b30:	22 1f       	adc	r18, r18
 b32:	74 9f       	mul	r23, r20
 b34:	33 27       	eor	r19, r19
 b36:	a0 0d       	add	r26, r0
 b38:	61 1d       	adc	r22, r1
 b3a:	23 1f       	adc	r18, r19
 b3c:	84 9f       	mul	r24, r20
 b3e:	60 0d       	add	r22, r0
 b40:	21 1d       	adc	r18, r1
 b42:	82 2f       	mov	r24, r18
 b44:	76 2f       	mov	r23, r22
 b46:	6a 2f       	mov	r22, r26
 b48:	11 24       	eor	r1, r1
 b4a:	9f 57       	subi	r25, 0x7F	; 127
 b4c:	50 40       	sbci	r21, 0x00	; 0
 b4e:	8a f0       	brmi	.+34     	; 0xb72 <__mulsf3_pse+0x84>
 b50:	e1 f0       	breq	.+56     	; 0xb8a <__mulsf3_pse+0x9c>
 b52:	88 23       	and	r24, r24
 b54:	4a f0       	brmi	.+18     	; 0xb68 <__mulsf3_pse+0x7a>
 b56:	ee 0f       	add	r30, r30
 b58:	ff 1f       	adc	r31, r31
 b5a:	bb 1f       	adc	r27, r27
 b5c:	66 1f       	adc	r22, r22
 b5e:	77 1f       	adc	r23, r23
 b60:	88 1f       	adc	r24, r24
 b62:	91 50       	subi	r25, 0x01	; 1
 b64:	50 40       	sbci	r21, 0x00	; 0
 b66:	a9 f7       	brne	.-22     	; 0xb52 <__mulsf3_pse+0x64>
 b68:	9e 3f       	cpi	r25, 0xFE	; 254
 b6a:	51 05       	cpc	r21, r1
 b6c:	70 f0       	brcs	.+28     	; 0xb8a <__mulsf3_pse+0x9c>
 b6e:	60 cf       	rjmp	.-320    	; 0xa30 <__fp_inf>
 b70:	aa cf       	rjmp	.-172    	; 0xac6 <__fp_szero>
 b72:	5f 3f       	cpi	r21, 0xFF	; 255
 b74:	ec f3       	brlt	.-6      	; 0xb70 <__mulsf3_pse+0x82>
 b76:	98 3e       	cpi	r25, 0xE8	; 232
 b78:	dc f3       	brlt	.-10     	; 0xb70 <__mulsf3_pse+0x82>
 b7a:	86 95       	lsr	r24
 b7c:	77 95       	ror	r23
 b7e:	67 95       	ror	r22
 b80:	b7 95       	ror	r27
 b82:	f7 95       	ror	r31
 b84:	e7 95       	ror	r30
 b86:	9f 5f       	subi	r25, 0xFF	; 255
 b88:	c1 f7       	brne	.-16     	; 0xb7a <__mulsf3_pse+0x8c>
 b8a:	fe 2b       	or	r31, r30
 b8c:	88 0f       	add	r24, r24
 b8e:	91 1d       	adc	r25, r1
 b90:	96 95       	lsr	r25
 b92:	87 95       	ror	r24
 b94:	97 f9       	bld	r25, 7
 b96:	08 95       	ret

00000b98 <__umulhisi3>:
 b98:	a2 9f       	mul	r26, r18
 b9a:	b0 01       	movw	r22, r0
 b9c:	b3 9f       	mul	r27, r19
 b9e:	c0 01       	movw	r24, r0
 ba0:	a3 9f       	mul	r26, r19
 ba2:	01 d0       	rcall	.+2      	; 0xba6 <__umulhisi3+0xe>
 ba4:	b2 9f       	mul	r27, r18
 ba6:	70 0d       	add	r23, r0
 ba8:	81 1d       	adc	r24, r1
 baa:	11 24       	eor	r1, r1
 bac:	91 1d       	adc	r25, r1
 bae:	08 95       	ret

00000bb0 <__muluhisi3>:
 bb0:	0e 94 cc 05 	call	0xb98	; 0xb98 <__umulhisi3>
 bb4:	a5 9f       	mul	r26, r21
 bb6:	90 0d       	add	r25, r0
 bb8:	b4 9f       	mul	r27, r20
 bba:	90 0d       	add	r25, r0
 bbc:	a4 9f       	mul	r26, r20
 bbe:	80 0d       	add	r24, r0
 bc0:	91 1d       	adc	r25, r1
 bc2:	11 24       	eor	r1, r1
 bc4:	08 95       	ret

00000bc6 <_exit>:
 bc6:	f8 94       	cli

00000bc8 <__stop_program>:
 bc8:	ff cf       	rjmp	.-2      	; 0xbc8 <__stop_program>
